
#
# This file is autogenerated.
#

cimport c_mcpp_lib

	#
	# Defines:
	#


	#
	# Supplements:
	#


from libc.stdlib cimport malloc, free
#from cpython.string cimport PyString_AsString
from cpython.bytes cimport PyBytes_AS_STRING
from cpython.unicode cimport PyUnicode_AsEncodedString

cpdef enum OUTDEST:
    OUT=c_mcpp_lib.OUT
    ERR=c_mcpp_lib.ERR
    DBG=c_mcpp_lib.DBG

def reset_def_out_func():
    c_mcpp_lib.mcpp_reset_def_out_func()

def set_out_func():
    raise NotImplementedError
    
def get_mem_buffer(OUTDEST od):
    cdef:
        char* buffer = c_mcpp_lib.mcpp_get_mem_buffer(od)
    
    if buffer is NULL:
        return None
    
    return buffer
    
def use_mem_buffers(int tf):
    c_mcpp_lib.mcpp_use_mem_buffers(tf)

def lib_main(argv):
    cdef:
        int cret
        int cargc = len(argv)
        char **cargv = <char**>malloc(cargc * sizeof(char*))
    
    avgv = [PyUnicode_AsEncodedString(arg, "utf-8", "Error ~") for arg in argv]
    for i in range(cargc):
        #cargv[i] = PyString_AsString(argv[i])
        cargv[i] = PyBytes_AS_STRING(avgv[i])

    cret = c_mcpp_lib.mcpp_lib_main(cargc, cargv)
    
    free(cargv)
    
    return cret

cdef class Preprocessor:
    def preprocess(self, *args):
        use_mem_buffers(1)
    
        if lib_main(('',) + args) != 0:
            raise RuntimeError(get_mem_buffer(ERR))
    
        return get_mem_buffer(OUT)
