
#
# This file is autogenerated.
#

cimport c_glfw3

	#
	# Supplements:
	#



#
# Defines
#

DEFAULT_WINDOW_SIZE = (800, 600)
DEFAULT_WINDOW_POSITION = None
DEFAULT_WINDOW_HINTS = {
    c_glfw3.GLFW_DECORATED: 1,
    c_glfw3.GLFW_FOCUSED: 1,
    c_glfw3.GLFW_RESIZABLE: 1,
    c_glfw3.GLFW_VISIBLE: 1,
    #GLFW 3.1+
    #c_glfw3.GLFW_FLOATING: 0,
}

DEFAULT_CONTEXT_HINTS = {
    c_glfw3.GLFW_CONTEXT_VERSION_MAJOR: 4,
    c_glfw3.GLFW_CONTEXT_VERSION_MINOR: 4,
    c_glfw3.GLFW_OPENGL_FORWARD_COMPAT: 1,
    c_glfw3.GLFW_OPENGL_PROFILE: c_glfw3.GLFW_OPENGL_CORE_PROFILE,
}

#
# Callbacks
#

cdef object _error_fun
cdef void errorfun_cb(int a, const char * b):
    global _error_fun
    (<object>_error_fun)(a, b)

cdef object _monitorfun
cdef void monitorfun_cb(c_glfw3.GLFWmonitor * a, int b):
    global _monitorfun
    _monitorfun(Monitor.fromthis(a), b)

cdef dict _windowposfuns = {}
cdef void windowposfun_cb(c_glfw3.GLFWwindow* a, int b, int c):
    cb = _windowposfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _windowsizefuns = {}
cdef void windowsizefun_cb(c_glfw3.GLFWwindow * a, int b, int c):
    cb = _windowsizefuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!
    
cdef dict _windowclosefuns = {}
cdef void windowclosefun_cb(c_glfw3.GLFWwindow * a):
    cb = _windowclosefuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window)
    window.release() # Borrowed reference, release ownership!

cdef dict _windowrefreshfuns = {}
cdef void windowrefreshfun_cb(c_glfw3.GLFWwindow * a):
    cb = _windowrefreshfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window)
    window.release() # Borrowed reference, release ownership!
    
cdef dict _windowfocusfuns = {}
cdef void windowfocusfun_cb(c_glfw3.GLFWwindow * a, int b):
    cb = _windowfocusfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _windowiconifyfuns = {}
cdef void windowiconifyfun_cb(c_glfw3.GLFWwindow * a, int b):
    cb = _windowiconifyfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _framebuffersizefuns = {}
cdef void framebuffersizefun_cb(c_glfw3.GLFWwindow* a,int b,int c):
    cb = _framebuffersizefuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _mousebuttonfuns = {}
cdef void mousebuttonfun_cb(c_glfw3.GLFWwindow* a,int b,int c,int d):
    cb = _mousebuttonfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c, d)
    window.release() # Borrowed reference, release ownership!

cdef dict _cursorposfuns = {}
cdef void cursorposfun_cb(c_glfw3.GLFWwindow* a,double b,double c):
    cb = _cursorposfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _cursorenterfuns = {}
cdef void cursorenterfun_cb(c_glfw3.GLFWwindow* a,int b):
    cb = _cursorenterfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _scrollfuns = {}
cdef void scrollfun_cb(c_glfw3.GLFWwindow* a,double b,double c):
    cb = _scrollfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _keyfuns = {}
cdef void keyfun_cb(c_glfw3.GLFWwindow* a,int b,int c,int d,int e):
    cb = _keyfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c, d, e)
    window.release() # Borrowed reference, release ownership!

cdef dict _charfuns = {}
cdef void charfun_cb(c_glfw3.GLFWwindow* a,unsigned int b):
    cb = _charfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _charmodsfuns = {}
cdef void charmodsfun_cb(c_glfw3.GLFWwindow* a,unsigned int b,int c):
    cb = _charmodsfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _dropfuns = {}
cdef void dropfun_cb(c_glfw3.GLFWwindow* a,int b,const char** c):
    cb = _dropfuns[<size_t>a]
    d = [<bytes>c[i] for i in range(b)]
    window = Window.fromthis(a)
    cb(window, d)
    window.release() # Borrowed reference, release ownership!

#
# Functions
#

cpdef initialize():
    return c_glfw3.glfwInit()

cpdef terminate():
    c_glfw3.glfwTerminate()

cpdef get_version():
    cdef int major, minor, rev
    c_glfw3.glfwGetVersion(&major, &minor, &rev)
    return major, minor, rev

cpdef get_version_string():
    return c_glfw3.glfwGetVersionString()

cpdef double get_time():
    return c_glfw3.glfwGetTime()

cpdef set_time(double value):
    return c_glfw3.glfwSetTime(value)
    
cpdef poll_events():
    c_glfw3.glfwPollEvents()

cpdef wait_events():
    c_glfw3.glfwWaitEvents()

#GLFW 3.1+
"""
cpdef post_empty_event():
    c_glfw3.glfwPostEmptyEvent()
"""

cpdef set_error_callback(cbfun):
    global _error_fun
    _error_fun = cbfun
    c_glfw3.glfwSetErrorCallback(errorfun_cb)

def set_monitor_callback(cbfun):
    global _monitorfun
    _monitorfun = cbfun
    c_glfw3.glfwSetMonitorCallback(monitorfun_cb)

cpdef swap_interval(int interval):
    c_glfw3.glfwSwapInterval(interval)

cpdef extension_supported(const char* extension):
    return c_glfw3.glfwExtensionSupported(extension)

cpdef get_proc_address(const char* procname):
    return <size_t>c_glfw3.glfwGetProcAddress(procname)

cdef class VideoMode:
    property width:
        def __get__(self):
            return self._this_ptr.width

    property height:
        def __get__(self):
            return self._this_ptr.height
    
    property red_bits:
        def __get__(self):
            return self._this_ptr.redBits

    property green_bits:
        def __get__(self):
            return self._this_ptr.greenBits

    property blue_bits:
        def __get__(self):
            return self._this_ptr.blueBits

    property refresh_rate:
        def __get__(self):
            return self._this_ptr.refreshRate

    property size:
        def __get__(self):
            return (self.width, self.height)
    
    property color_bits:
        def __get__(self):
            return (self.red_bits, self.green_bits, self.blue_bits)
    
    def __cinit__(self):
        self._this = NULL
    
    def __dealloc__(self):
        pass
        
    def __richcmp__(VideoMode self, VideoMode other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class Monitor:
    property position:
        def __get__(self):
            cdef int x, y
            c_glfw3.glfwGetMonitorPos(self._this, &x, &y)
            return (x, y)
    
    property size:
        def __get__(self):
            return self.video_mode.size
    
    property physical_size:
        def __get__(self):
            cdef int w, h
            c_glfw3.glfwGetMonitorPhysicalSize(self._this, &w, &h)
            return (w, h)
    
    property name:
        def __get__(self):
            return c_glfw3.glfwGetMonitorName(self._this)
    
    property gamma_ramp:
        def __get__(self):
            cdef c_glfw3.GLFWgammaramp * gamma_ramp = NULL
            gamma_ramp = c_glfw3.glfwGetGammaRamp(self._this)
            return GammaRamp.fromthis(gamma_ramp)
            
        def __set__(self, GammaRamp value):
            c_glfw3.glfwSetGammaRamp(self._this, value._this)
    
    property video_mode:
        def __get__(self):
            cdef c_glfw3.GLFWvidmode * video_mode = NULL
            video_mode = c_glfw3.glfwGetVideoMode(self._this)
            return VideoMode.fromthis(video_mode)
    
    property video_modes:
        def __get__(self):
            cdef int count
            cdef const c_glfw3.GLFWvidmode * video_modes = NULL
            video_modes = c_glfw3.glfwGetVideoModes(self._this, &count)
            return [VideoMode.fromthis(&video_modes[i]) for i in range(count)]
    
    @staticmethod
    def get_primary_monitor():
        cdef c_glfw3.GLFWmonitor * primary_monitor = NULL
        primary_monitor = c_glfw3.glfwGetPrimaryMonitor()
        return Monitor.fromthis(primary_monitor)
    
    @staticmethod
    def get_monitors():
        cdef int count
        cdef c_glfw3.GLFWmonitor ** monitors = NULL
        monitors = c_glfw3.glfwGetMonitors(&count)
        return [Monitor.fromthis(monitors[i]) for i in range(count)]
    
    def __cinit__(self):
        self._this = NULL
    
    def __dealloc__(self):
        pass
        
    def __richcmp__(Monitor self, Monitor other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class GammaRamp:
    property red:
        def __get__(self):
            return [self._this.red[i] for i in range(self._this.size)]

    property green:
        def __get__(self):
            return [self._this.green[i] for i in range(self._this.size)]
            
    property blue:
        def __get__(self):
            return [self._this.blue[i] for i in range(self._this.size)]
    
    def __cinit__(self):
        self._this = NULL
    
    def __dealloc__(self):
        pass
        
    def __richcmp__(GammaRamp self, GammaRamp other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class Window:
    property position:
        def __get__(self):
            cdef int x, y
            c_glfw3.glfwGetWindowPos(self._this, &x, &y)
            return (x, y)
        
        def __set__(self, value):
            c_glfw3.glfwSetWindowPos(self._this, value[0], value[1])
        
    property size:
        def __get__(self):
            cdef int w, h
            c_glfw3.glfwGetWindowSize(self._this, &w, &h)
            return (w, h)
        
        def __set__(self, value):
            c_glfw3.glfwSetWindowSize(self._this, value[0], value[1])
    
    property framebuffer_size:
        def __get__(self):
            cdef int w, h
            c_glfw3.glfwGetFramebufferSize(self._this, &w, &h)
            return (w, h)
    
    property title:
        def __set__(self, const char * value):
            c_glfw3.glfwSetWindowTitle(self._this, value)
    
    property clipboard_string:
        def __get__(self):
            return c_glfw3.glfwGetClipboardString(self._this)
        
        def __set__(self, const char * value):
            c_glfw3.glfwSetClipboardString(self._this, value)
            
    def __cinit__(self):
        self._this = NULL
    
    def __init__(self, title, size=DEFAULT_WINDOW_SIZE, position=DEFAULT_WINDOW_POSITION, monitor=None, share=None, hints=None):
        _hints = {}
        _hints.update(DEFAULT_WINDOW_HINTS)
        _hints.update(DEFAULT_CONTEXT_HINTS)
        _hints.update(hints or {})
        
        c_glfw3.glfwDefaultWindowHints()
        for key, value in _hints.items():
            c_glfw3.glfwWindowHint(key, value)
        
        self._this = c_glfw3.glfwCreateWindow(size[0], size[1], title, NULL, NULL)
    
    def __dealloc__(self):
        c_glfw3.glfwDestroyWindow(self._this)
        self._this = NULL
    
    def __richcmp__(Window self, Window other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
        
    def __hash__(self):
        return <size_t>self._this
    
    cpdef set_window_position_callback(self, cbfun):
        global _windowposfuns
        _windowposfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowPosCallback(self._this, windowposfun_cb)
    
    cpdef set_window_size_callback(self, cbfun):
        global _windowsizefuns
        _windowsizefuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowSizeCallback(self._this, windowsizefun_cb)
        
    cpdef set_window_close_callback(self, cbfun):
        global _windowclosefuns
        _windowclosefuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowCloseCallback(self._this, windowclosefun_cb)
    
    cpdef set_window_refresh_callback(self, cbfun):
        global _windowrefreshfuns
        _windowrefreshfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowRefreshCallback(self._this, windowrefreshfun_cb)
        
    cpdef set_window_focus_callback(self, cbfun):
        global _windowfocusfuns
        _windowfocusfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowFocusCallback(self._this, windowfocusfun_cb)
    
    cpdef set_window_iconify_callback(self, cbfun):
        global _windowiconifyfuns
        _windowiconifyfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowIconifyCallback(self._this, windowiconifyfun_cb)
    
    cpdef set_framebuffer_size_callback(self, cbfun):
        global _framebuffersizefuns
        _framebuffersizefuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetFramebufferSizeCallback(self._this, framebuffersizefun_cb)
    
    cpdef set_key_callback(self, cbfun):
        global _keyfuns
        _keyfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetKeyCallback(self._this, keyfun_cb)

    cpdef set_char_callback(self, cbfun):
        global _charfuns
        _charfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCharCallback(self._this, charfun_cb)
    
    #GLFW 3.1
    """
    cpdef set_char_mods_callback(self, cbfun):
        global _charmodsfuns
        _charmodsfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCharModsCallback(self._this, charmodsfun_cb)
    """
    
    cpdef set_mouse_button_callback(self, cbfun):
        global _mousebuttonfuns
        _mousebuttonfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetMouseButtonCallback(self._this, mousebuttonfun_cb)

    cpdef set_cursor_position_callback(self, cbfun):
        global _cursorposfuns
        _cursorposfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCursorPosCallback(self._this, cursorposfun_cb)

    cpdef set_cursor_enter_callback(self, cbfun):
        global _cursorenterfuns
        _cursorenterfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCursorEnterCallback(self._this, cursorenterfun_cb)

    cpdef set_scroll_callback(self, cbfun):
        global _scrollfuns
        _scrollfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetScrollCallback(self._this, scrollfun_cb)
    
    #GLFW 3.1
    """
    cpdef set_drop_callback(self, cbfun):
        global _dropfuns
        _dropfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetDropCallback(self._this, dropfun_cb)
    """
    
    on_window_position = set_window_position_callback
    on_window_size = set_window_size_callback
    on_window_close = set_window_close_callback
    on_window_refresh = set_window_refresh_callback
    on_window_focus = set_window_focus_callback
    on_window_iconify = set_window_iconify_callback
    on_framebuffer_size = set_framebuffer_size_callback
    on_keyboard_key = set_key_callback
    on_keyboard_char = set_char_callback
    #on_keyboard_char_mods = set_char_mods_callback
    on_mouse_button = set_mouse_button_callback
    on_mouse_position = set_cursor_position_callback
    on_mouse_enter = set_cursor_enter_callback
    on_mouse_wheel = set_scroll_callback
    #on_window_drop = set_drop_callback
    
    cpdef should_close(self):
        return c_glfw3.glfwWindowShouldClose(self._this)
    
    cpdef iconify(self):
        c_glfw3.glfwIconifyWindow(self._this)
    
    cpdef restore(self):
        c_glfw3.glfwRestoreWindow(self._this)
    
    cpdef show(self):
        c_glfw3.glfwShowWindow(self._this)
    
    cpdef hide(self):
        c_glfw3.glfwHideWindow(self._this)
    
    cpdef swap_buffers(self):
        c_glfw3.glfwSwapBuffers(self._this)
    
cdef class Context:
    @staticmethod
    def get_current():
        cdef c_glfw3.GLFWwindow * window = NULL
        window = c_glfw3.glfwGetCurrentContext()
        return Context.fromthis(window)
        
    @staticmethod
    def set_current(Context context):
        cdef c_glfw3.GLFWwindow * window = NULL
        if context is not None: window = context._this
        c_glfw3.glfwMakeContextCurrent(window)
    
    def __cinit__(self):
        self._this = NULL

    def __init__(self, Window window):
        self._this = window._this

    def __dealloc__(self):
        pass

    def __richcmp__(Context self, Context other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this
