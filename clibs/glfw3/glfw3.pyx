
#
# This file is autogenerated.
#

cimport c_glfw3

	#
	# Defines:
	#

GLFW_VERSION_MAJOR = c_glfw3.GLFW_VERSION_MAJOR
GLFW_VERSION_MINOR = c_glfw3.GLFW_VERSION_MINOR
GLFW_VERSION_REVISION = c_glfw3.GLFW_VERSION_REVISION
GLFW_RELEASE = c_glfw3.GLFW_RELEASE
GLFW_PRESS = c_glfw3.GLFW_PRESS
GLFW_REPEAT = c_glfw3.GLFW_REPEAT
GLFW_KEY_UNKNOWN = c_glfw3.GLFW_KEY_UNKNOWN
GLFW_KEY_SPACE = c_glfw3.GLFW_KEY_SPACE
GLFW_KEY_APOSTROPHE = c_glfw3.GLFW_KEY_APOSTROPHE
GLFW_KEY_COMMA = c_glfw3.GLFW_KEY_COMMA
GLFW_KEY_MINUS = c_glfw3.GLFW_KEY_MINUS
GLFW_KEY_PERIOD = c_glfw3.GLFW_KEY_PERIOD
GLFW_KEY_SLASH = c_glfw3.GLFW_KEY_SLASH
GLFW_KEY_0 = c_glfw3.GLFW_KEY_0
GLFW_KEY_1 = c_glfw3.GLFW_KEY_1
GLFW_KEY_2 = c_glfw3.GLFW_KEY_2
GLFW_KEY_3 = c_glfw3.GLFW_KEY_3
GLFW_KEY_4 = c_glfw3.GLFW_KEY_4
GLFW_KEY_5 = c_glfw3.GLFW_KEY_5
GLFW_KEY_6 = c_glfw3.GLFW_KEY_6
GLFW_KEY_7 = c_glfw3.GLFW_KEY_7
GLFW_KEY_8 = c_glfw3.GLFW_KEY_8
GLFW_KEY_9 = c_glfw3.GLFW_KEY_9
GLFW_KEY_SEMICOLON = c_glfw3.GLFW_KEY_SEMICOLON
GLFW_KEY_EQUAL = c_glfw3.GLFW_KEY_EQUAL
GLFW_KEY_A = c_glfw3.GLFW_KEY_A
GLFW_KEY_B = c_glfw3.GLFW_KEY_B
GLFW_KEY_C = c_glfw3.GLFW_KEY_C
GLFW_KEY_D = c_glfw3.GLFW_KEY_D
GLFW_KEY_E = c_glfw3.GLFW_KEY_E
GLFW_KEY_F = c_glfw3.GLFW_KEY_F
GLFW_KEY_G = c_glfw3.GLFW_KEY_G
GLFW_KEY_H = c_glfw3.GLFW_KEY_H
GLFW_KEY_I = c_glfw3.GLFW_KEY_I
GLFW_KEY_J = c_glfw3.GLFW_KEY_J
GLFW_KEY_K = c_glfw3.GLFW_KEY_K
GLFW_KEY_L = c_glfw3.GLFW_KEY_L
GLFW_KEY_M = c_glfw3.GLFW_KEY_M
GLFW_KEY_N = c_glfw3.GLFW_KEY_N
GLFW_KEY_O = c_glfw3.GLFW_KEY_O
GLFW_KEY_P = c_glfw3.GLFW_KEY_P
GLFW_KEY_Q = c_glfw3.GLFW_KEY_Q
GLFW_KEY_R = c_glfw3.GLFW_KEY_R
GLFW_KEY_S = c_glfw3.GLFW_KEY_S
GLFW_KEY_T = c_glfw3.GLFW_KEY_T
GLFW_KEY_U = c_glfw3.GLFW_KEY_U
GLFW_KEY_V = c_glfw3.GLFW_KEY_V
GLFW_KEY_W = c_glfw3.GLFW_KEY_W
GLFW_KEY_X = c_glfw3.GLFW_KEY_X
GLFW_KEY_Y = c_glfw3.GLFW_KEY_Y
GLFW_KEY_Z = c_glfw3.GLFW_KEY_Z
GLFW_KEY_LEFT_BRACKET = c_glfw3.GLFW_KEY_LEFT_BRACKET
GLFW_KEY_BACKSLASH = c_glfw3.GLFW_KEY_BACKSLASH
GLFW_KEY_RIGHT_BRACKET = c_glfw3.GLFW_KEY_RIGHT_BRACKET
GLFW_KEY_GRAVE_ACCENT = c_glfw3.GLFW_KEY_GRAVE_ACCENT
GLFW_KEY_WORLD_1 = c_glfw3.GLFW_KEY_WORLD_1
GLFW_KEY_WORLD_2 = c_glfw3.GLFW_KEY_WORLD_2
GLFW_KEY_ESCAPE = c_glfw3.GLFW_KEY_ESCAPE
GLFW_KEY_ENTER = c_glfw3.GLFW_KEY_ENTER
GLFW_KEY_TAB = c_glfw3.GLFW_KEY_TAB
GLFW_KEY_BACKSPACE = c_glfw3.GLFW_KEY_BACKSPACE
GLFW_KEY_INSERT = c_glfw3.GLFW_KEY_INSERT
GLFW_KEY_DELETE = c_glfw3.GLFW_KEY_DELETE
GLFW_KEY_RIGHT = c_glfw3.GLFW_KEY_RIGHT
GLFW_KEY_LEFT = c_glfw3.GLFW_KEY_LEFT
GLFW_KEY_DOWN = c_glfw3.GLFW_KEY_DOWN
GLFW_KEY_UP = c_glfw3.GLFW_KEY_UP
GLFW_KEY_PAGE_UP = c_glfw3.GLFW_KEY_PAGE_UP
GLFW_KEY_PAGE_DOWN = c_glfw3.GLFW_KEY_PAGE_DOWN
GLFW_KEY_HOME = c_glfw3.GLFW_KEY_HOME
GLFW_KEY_END = c_glfw3.GLFW_KEY_END
GLFW_KEY_CAPS_LOCK = c_glfw3.GLFW_KEY_CAPS_LOCK
GLFW_KEY_SCROLL_LOCK = c_glfw3.GLFW_KEY_SCROLL_LOCK
GLFW_KEY_NUM_LOCK = c_glfw3.GLFW_KEY_NUM_LOCK
GLFW_KEY_PRINT_SCREEN = c_glfw3.GLFW_KEY_PRINT_SCREEN
GLFW_KEY_PAUSE = c_glfw3.GLFW_KEY_PAUSE
GLFW_KEY_F1 = c_glfw3.GLFW_KEY_F1
GLFW_KEY_F2 = c_glfw3.GLFW_KEY_F2
GLFW_KEY_F3 = c_glfw3.GLFW_KEY_F3
GLFW_KEY_F4 = c_glfw3.GLFW_KEY_F4
GLFW_KEY_F5 = c_glfw3.GLFW_KEY_F5
GLFW_KEY_F6 = c_glfw3.GLFW_KEY_F6
GLFW_KEY_F7 = c_glfw3.GLFW_KEY_F7
GLFW_KEY_F8 = c_glfw3.GLFW_KEY_F8
GLFW_KEY_F9 = c_glfw3.GLFW_KEY_F9
GLFW_KEY_F10 = c_glfw3.GLFW_KEY_F10
GLFW_KEY_F11 = c_glfw3.GLFW_KEY_F11
GLFW_KEY_F12 = c_glfw3.GLFW_KEY_F12
GLFW_KEY_F13 = c_glfw3.GLFW_KEY_F13
GLFW_KEY_F14 = c_glfw3.GLFW_KEY_F14
GLFW_KEY_F15 = c_glfw3.GLFW_KEY_F15
GLFW_KEY_F16 = c_glfw3.GLFW_KEY_F16
GLFW_KEY_F17 = c_glfw3.GLFW_KEY_F17
GLFW_KEY_F18 = c_glfw3.GLFW_KEY_F18
GLFW_KEY_F19 = c_glfw3.GLFW_KEY_F19
GLFW_KEY_F20 = c_glfw3.GLFW_KEY_F20
GLFW_KEY_F21 = c_glfw3.GLFW_KEY_F21
GLFW_KEY_F22 = c_glfw3.GLFW_KEY_F22
GLFW_KEY_F23 = c_glfw3.GLFW_KEY_F23
GLFW_KEY_F24 = c_glfw3.GLFW_KEY_F24
GLFW_KEY_F25 = c_glfw3.GLFW_KEY_F25
GLFW_KEY_KP_0 = c_glfw3.GLFW_KEY_KP_0
GLFW_KEY_KP_1 = c_glfw3.GLFW_KEY_KP_1
GLFW_KEY_KP_2 = c_glfw3.GLFW_KEY_KP_2
GLFW_KEY_KP_3 = c_glfw3.GLFW_KEY_KP_3
GLFW_KEY_KP_4 = c_glfw3.GLFW_KEY_KP_4
GLFW_KEY_KP_5 = c_glfw3.GLFW_KEY_KP_5
GLFW_KEY_KP_6 = c_glfw3.GLFW_KEY_KP_6
GLFW_KEY_KP_7 = c_glfw3.GLFW_KEY_KP_7
GLFW_KEY_KP_8 = c_glfw3.GLFW_KEY_KP_8
GLFW_KEY_KP_9 = c_glfw3.GLFW_KEY_KP_9
GLFW_KEY_KP_DECIMAL = c_glfw3.GLFW_KEY_KP_DECIMAL
GLFW_KEY_KP_DIVIDE = c_glfw3.GLFW_KEY_KP_DIVIDE
GLFW_KEY_KP_MULTIPLY = c_glfw3.GLFW_KEY_KP_MULTIPLY
GLFW_KEY_KP_SUBTRACT = c_glfw3.GLFW_KEY_KP_SUBTRACT
GLFW_KEY_KP_ADD = c_glfw3.GLFW_KEY_KP_ADD
GLFW_KEY_KP_ENTER = c_glfw3.GLFW_KEY_KP_ENTER
GLFW_KEY_KP_EQUAL = c_glfw3.GLFW_KEY_KP_EQUAL
GLFW_KEY_LEFT_SHIFT = c_glfw3.GLFW_KEY_LEFT_SHIFT
GLFW_KEY_LEFT_CONTROL = c_glfw3.GLFW_KEY_LEFT_CONTROL
GLFW_KEY_LEFT_ALT = c_glfw3.GLFW_KEY_LEFT_ALT
GLFW_KEY_LEFT_SUPER = c_glfw3.GLFW_KEY_LEFT_SUPER
GLFW_KEY_RIGHT_SHIFT = c_glfw3.GLFW_KEY_RIGHT_SHIFT
GLFW_KEY_RIGHT_CONTROL = c_glfw3.GLFW_KEY_RIGHT_CONTROL
GLFW_KEY_RIGHT_ALT = c_glfw3.GLFW_KEY_RIGHT_ALT
GLFW_KEY_RIGHT_SUPER = c_glfw3.GLFW_KEY_RIGHT_SUPER
GLFW_KEY_MENU = c_glfw3.GLFW_KEY_MENU
GLFW_KEY_LAST = c_glfw3.GLFW_KEY_LAST
GLFW_MOD_SHIFT = c_glfw3.GLFW_MOD_SHIFT
GLFW_MOD_CONTROL = c_glfw3.GLFW_MOD_CONTROL
GLFW_MOD_ALT = c_glfw3.GLFW_MOD_ALT
GLFW_MOD_SUPER = c_glfw3.GLFW_MOD_SUPER
GLFW_MOUSE_BUTTON_1 = c_glfw3.GLFW_MOUSE_BUTTON_1
GLFW_MOUSE_BUTTON_2 = c_glfw3.GLFW_MOUSE_BUTTON_2
GLFW_MOUSE_BUTTON_3 = c_glfw3.GLFW_MOUSE_BUTTON_3
GLFW_MOUSE_BUTTON_4 = c_glfw3.GLFW_MOUSE_BUTTON_4
GLFW_MOUSE_BUTTON_5 = c_glfw3.GLFW_MOUSE_BUTTON_5
GLFW_MOUSE_BUTTON_6 = c_glfw3.GLFW_MOUSE_BUTTON_6
GLFW_MOUSE_BUTTON_7 = c_glfw3.GLFW_MOUSE_BUTTON_7
GLFW_MOUSE_BUTTON_8 = c_glfw3.GLFW_MOUSE_BUTTON_8
GLFW_MOUSE_BUTTON_LAST = c_glfw3.GLFW_MOUSE_BUTTON_LAST
GLFW_MOUSE_BUTTON_LEFT = c_glfw3.GLFW_MOUSE_BUTTON_LEFT
GLFW_MOUSE_BUTTON_RIGHT = c_glfw3.GLFW_MOUSE_BUTTON_RIGHT
GLFW_MOUSE_BUTTON_MIDDLE = c_glfw3.GLFW_MOUSE_BUTTON_MIDDLE
GLFW_JOYSTICK_1 = c_glfw3.GLFW_JOYSTICK_1
GLFW_JOYSTICK_2 = c_glfw3.GLFW_JOYSTICK_2
GLFW_JOYSTICK_3 = c_glfw3.GLFW_JOYSTICK_3
GLFW_JOYSTICK_4 = c_glfw3.GLFW_JOYSTICK_4
GLFW_JOYSTICK_5 = c_glfw3.GLFW_JOYSTICK_5
GLFW_JOYSTICK_6 = c_glfw3.GLFW_JOYSTICK_6
GLFW_JOYSTICK_7 = c_glfw3.GLFW_JOYSTICK_7
GLFW_JOYSTICK_8 = c_glfw3.GLFW_JOYSTICK_8
GLFW_JOYSTICK_9 = c_glfw3.GLFW_JOYSTICK_9
GLFW_JOYSTICK_10 = c_glfw3.GLFW_JOYSTICK_10
GLFW_JOYSTICK_11 = c_glfw3.GLFW_JOYSTICK_11
GLFW_JOYSTICK_12 = c_glfw3.GLFW_JOYSTICK_12
GLFW_JOYSTICK_13 = c_glfw3.GLFW_JOYSTICK_13
GLFW_JOYSTICK_14 = c_glfw3.GLFW_JOYSTICK_14
GLFW_JOYSTICK_15 = c_glfw3.GLFW_JOYSTICK_15
GLFW_JOYSTICK_16 = c_glfw3.GLFW_JOYSTICK_16
GLFW_JOYSTICK_LAST = c_glfw3.GLFW_JOYSTICK_LAST
GLFW_NOT_INITIALIZED = c_glfw3.GLFW_NOT_INITIALIZED
GLFW_NO_CURRENT_CONTEXT = c_glfw3.GLFW_NO_CURRENT_CONTEXT
GLFW_INVALID_ENUM = c_glfw3.GLFW_INVALID_ENUM
GLFW_INVALID_VALUE = c_glfw3.GLFW_INVALID_VALUE
GLFW_OUT_OF_MEMORY = c_glfw3.GLFW_OUT_OF_MEMORY
GLFW_API_UNAVAILABLE = c_glfw3.GLFW_API_UNAVAILABLE
GLFW_VERSION_UNAVAILABLE = c_glfw3.GLFW_VERSION_UNAVAILABLE
GLFW_PLATFORM_ERROR = c_glfw3.GLFW_PLATFORM_ERROR
GLFW_FORMAT_UNAVAILABLE = c_glfw3.GLFW_FORMAT_UNAVAILABLE
GLFW_FOCUSED = c_glfw3.GLFW_FOCUSED
GLFW_ICONIFIED = c_glfw3.GLFW_ICONIFIED
GLFW_RESIZABLE = c_glfw3.GLFW_RESIZABLE
GLFW_VISIBLE = c_glfw3.GLFW_VISIBLE
GLFW_DECORATED = c_glfw3.GLFW_DECORATED
GLFW_AUTO_ICONIFY = c_glfw3.GLFW_AUTO_ICONIFY
GLFW_FLOATING = c_glfw3.GLFW_FLOATING
GLFW_RED_BITS = c_glfw3.GLFW_RED_BITS
GLFW_GREEN_BITS = c_glfw3.GLFW_GREEN_BITS
GLFW_BLUE_BITS = c_glfw3.GLFW_BLUE_BITS
GLFW_ALPHA_BITS = c_glfw3.GLFW_ALPHA_BITS
GLFW_DEPTH_BITS = c_glfw3.GLFW_DEPTH_BITS
GLFW_STENCIL_BITS = c_glfw3.GLFW_STENCIL_BITS
GLFW_ACCUM_RED_BITS = c_glfw3.GLFW_ACCUM_RED_BITS
GLFW_ACCUM_GREEN_BITS = c_glfw3.GLFW_ACCUM_GREEN_BITS
GLFW_ACCUM_BLUE_BITS = c_glfw3.GLFW_ACCUM_BLUE_BITS
GLFW_ACCUM_ALPHA_BITS = c_glfw3.GLFW_ACCUM_ALPHA_BITS
GLFW_AUX_BUFFERS = c_glfw3.GLFW_AUX_BUFFERS
GLFW_STEREO = c_glfw3.GLFW_STEREO
GLFW_SAMPLES = c_glfw3.GLFW_SAMPLES
GLFW_SRGB_CAPABLE = c_glfw3.GLFW_SRGB_CAPABLE
GLFW_REFRESH_RATE = c_glfw3.GLFW_REFRESH_RATE
GLFW_DOUBLEBUFFER = c_glfw3.GLFW_DOUBLEBUFFER
GLFW_CLIENT_API = c_glfw3.GLFW_CLIENT_API
GLFW_CONTEXT_VERSION_MAJOR = c_glfw3.GLFW_CONTEXT_VERSION_MAJOR
GLFW_CONTEXT_VERSION_MINOR = c_glfw3.GLFW_CONTEXT_VERSION_MINOR
GLFW_CONTEXT_REVISION = c_glfw3.GLFW_CONTEXT_REVISION
GLFW_CONTEXT_ROBUSTNESS = c_glfw3.GLFW_CONTEXT_ROBUSTNESS
GLFW_OPENGL_FORWARD_COMPAT = c_glfw3.GLFW_OPENGL_FORWARD_COMPAT
GLFW_OPENGL_DEBUG_CONTEXT = c_glfw3.GLFW_OPENGL_DEBUG_CONTEXT
GLFW_OPENGL_PROFILE = c_glfw3.GLFW_OPENGL_PROFILE
GLFW_CONTEXT_RELEASE_BEHAVIOR = c_glfw3.GLFW_CONTEXT_RELEASE_BEHAVIOR
GLFW_OPENGL_API = c_glfw3.GLFW_OPENGL_API
GLFW_OPENGL_ES_API = c_glfw3.GLFW_OPENGL_ES_API
GLFW_NO_ROBUSTNESS = c_glfw3.GLFW_NO_ROBUSTNESS
GLFW_NO_RESET_NOTIFICATION = c_glfw3.GLFW_NO_RESET_NOTIFICATION
GLFW_LOSE_CONTEXT_ON_RESET = c_glfw3.GLFW_LOSE_CONTEXT_ON_RESET
GLFW_OPENGL_ANY_PROFILE = c_glfw3.GLFW_OPENGL_ANY_PROFILE
GLFW_OPENGL_CORE_PROFILE = c_glfw3.GLFW_OPENGL_CORE_PROFILE
GLFW_OPENGL_COMPAT_PROFILE = c_glfw3.GLFW_OPENGL_COMPAT_PROFILE
GLFW_CURSOR = c_glfw3.GLFW_CURSOR
GLFW_STICKY_KEYS = c_glfw3.GLFW_STICKY_KEYS
GLFW_STICKY_MOUSE_BUTTONS = c_glfw3.GLFW_STICKY_MOUSE_BUTTONS
GLFW_CURSOR_NORMAL = c_glfw3.GLFW_CURSOR_NORMAL
GLFW_CURSOR_HIDDEN = c_glfw3.GLFW_CURSOR_HIDDEN
GLFW_CURSOR_DISABLED = c_glfw3.GLFW_CURSOR_DISABLED
GLFW_ANY_RELEASE_BEHAVIOR = c_glfw3.GLFW_ANY_RELEASE_BEHAVIOR
GLFW_RELEASE_BEHAVIOR_FLUSH = c_glfw3.GLFW_RELEASE_BEHAVIOR_FLUSH
GLFW_RELEASE_BEHAVIOR_NONE = c_glfw3.GLFW_RELEASE_BEHAVIOR_NONE
GLFW_ARROW_CURSOR = c_glfw3.GLFW_ARROW_CURSOR
GLFW_IBEAM_CURSOR = c_glfw3.GLFW_IBEAM_CURSOR
GLFW_CROSSHAIR_CURSOR = c_glfw3.GLFW_CROSSHAIR_CURSOR
GLFW_HAND_CURSOR = c_glfw3.GLFW_HAND_CURSOR
GLFW_HRESIZE_CURSOR = c_glfw3.GLFW_HRESIZE_CURSOR
GLFW_VRESIZE_CURSOR = c_glfw3.GLFW_VRESIZE_CURSOR
GLFW_CONNECTED = c_glfw3.GLFW_CONNECTED
GLFW_DISCONNECTED = c_glfw3.GLFW_DISCONNECTED
GLFW_DONT_CARE = c_glfw3.GLFW_DONT_CARE

	#
	# Supplements:
	#


from libc.stdlib cimport malloc, free

from cython cimport view

#
# Defines
#

DEFAULT_WINDOW_SIZE = (800, 600)
DEFAULT_WINDOW_POSITION = None
DEFAULT_WINDOW_HINTS = {
    c_glfw3.GLFW_DECORATED: 1,
    c_glfw3.GLFW_FOCUSED: 1,
    c_glfw3.GLFW_RESIZABLE: 1,
    c_glfw3.GLFW_VISIBLE: 1,
    c_glfw3.GLFW_FLOATING: 0,
}

DEFAULT_CONTEXT_HINTS = {
    c_glfw3.GLFW_CONTEXT_VERSION_MAJOR: 3,
    c_glfw3.GLFW_CONTEXT_VERSION_MINOR: 2,
    c_glfw3.GLFW_OPENGL_FORWARD_COMPAT: 1,
    c_glfw3.GLFW_OPENGL_PROFILE: c_glfw3.GLFW_OPENGL_CORE_PROFILE,
}

#
# Enums
#

from enum import IntEnum

#cpdef enum WindowAttribute:
class WindowAttribute(IntEnum):
    FOCUSED=c_glfw3.GLFW_FOCUSED
    ICONIFIED=c_glfw3.GLFW_ICONIFIED
    VISIBLE=c_glfw3.GLFW_VISIBLE
    RESIZABLE=c_glfw3.GLFW_RESIZABLE
    DECORATED=c_glfw3.GLFW_DECORATED
    FLOATING=c_glfw3.GLFW_FLOATING

#cpdef enum ContextAttribute:
class ContextAttribute(IntEnum):
    CLIENT_API=c_glfw3.GLFW_CLIENT_API
    VERSION_MAJOR=c_glfw3.GLFW_CONTEXT_VERSION_MAJOR
    VERSION_MINOR=c_glfw3.GLFW_CONTEXT_VERSION_MINOR
    VERSION_MICRO=c_glfw3.GLFW_CONTEXT_REVISION
    OPENGL_FORWARD_COMPAT=c_glfw3.GLFW_OPENGL_FORWARD_COMPAT
    OPENGL_DEBUG_CONTEXT=c_glfw3.GLFW_OPENGL_DEBUG_CONTEXT
    OPENGL_PROFILE=c_glfw3.GLFW_OPENGL_PROFILE
    ROBUSTNESS=c_glfw3.GLFW_CONTEXT_ROBUSTNESS

#cpdef enum CursorShape:
class CursorShape(IntEnum):
    ARROW=c_glfw3.GLFW_ARROW_CURSOR
    IBEAM=c_glfw3.GLFW_IBEAM_CURSOR
    CROSSHAIR=c_glfw3.GLFW_CROSSHAIR_CURSOR
    HAND=c_glfw3.GLFW_HAND_CURSOR
    HRESIZE=c_glfw3.GLFW_HRESIZE_CURSOR
    VRESIZE=c_glfw3.GLFW_VRESIZE_CURSOR

#cpdef enum InputMode:
class InputMode(IntEnum):
    CURSOR=c_glfw3.GLFW_CURSOR
    STICKY_KEYS=c_glfw3.GLFW_STICKY_KEYS
    STICKY_MOUSE_BUTTONS=c_glfw3.GLFW_STICKY_MOUSE_BUTTONS

#cpdef enum Action:
class Action(IntEnum):
    PRESS=c_glfw3.GLFW_PRESS
    RELEASE=c_glfw3.GLFW_RELEASE
    REPEAT=c_glfw3.GLFW_REPEAT

#cpdef enum Modifier:
class Modifier(IntEnum):
    SHIFT=c_glfw3.GLFW_MOD_SHIFT
    CONTROL=c_glfw3.GLFW_MOD_CONTROL
    ALT=c_glfw3.GLFW_MOD_ALT
    SUPER=c_glfw3.GLFW_MOD_SUPER

#
# Callbacks
#

cdef object _error_fun
cdef void errorfun_cb(int a, const char * b):
    global _error_fun
    (<object>_error_fun)(a, b)

cdef object _monitorfun
cdef void monitorfun_cb(c_glfw3.GLFWmonitor * a, int b):
    global _monitorfun
    _monitorfun(Monitor.fromthis(a), b)

cdef dict _windowposfuns = {}
cdef void windowposfun_cb(c_glfw3.GLFWwindow* a, int b, int c):
    cb = _windowposfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _windowsizefuns = {}
cdef void windowsizefun_cb(c_glfw3.GLFWwindow * a, int b, int c):
    cb = _windowsizefuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!
    
cdef dict _windowclosefuns = {}
cdef void windowclosefun_cb(c_glfw3.GLFWwindow * a):
    cb = _windowclosefuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window)
    window.release() # Borrowed reference, release ownership!

cdef dict _windowrefreshfuns = {}
cdef void windowrefreshfun_cb(c_glfw3.GLFWwindow * a):
    cb = _windowrefreshfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window)
    window.release() # Borrowed reference, release ownership!
    
cdef dict _windowfocusfuns = {}
cdef void windowfocusfun_cb(c_glfw3.GLFWwindow * a, int b):
    cb = _windowfocusfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _windowiconifyfuns = {}
cdef void windowiconifyfun_cb(c_glfw3.GLFWwindow * a, int b):
    cb = _windowiconifyfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _framebuffersizefuns = {}
cdef void framebuffersizefun_cb(c_glfw3.GLFWwindow* a,int b,int c):
    cb = _framebuffersizefuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _mousebuttonfuns = {}
cdef void mousebuttonfun_cb(c_glfw3.GLFWwindow* a,int b,int c,int d):
    cb = _mousebuttonfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c, d)
    window.release() # Borrowed reference, release ownership!

cdef dict _cursorposfuns = {}
cdef void cursorposfun_cb(c_glfw3.GLFWwindow* a,double b,double c):
    cb = _cursorposfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _cursorenterfuns = {}
cdef void cursorenterfun_cb(c_glfw3.GLFWwindow* a,int b):
    cb = _cursorenterfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _scrollfuns = {}
cdef void scrollfun_cb(c_glfw3.GLFWwindow* a,double b,double c):
    cb = _scrollfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _keyfuns = {}
cdef void keyfun_cb(c_glfw3.GLFWwindow* a,int b,int c,int d,int e):
    cb = _keyfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c, d, e)
    window.release() # Borrowed reference, release ownership!

cdef dict _charfuns = {}
cdef void charfun_cb(c_glfw3.GLFWwindow* a,unsigned int b):
    cb = _charfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b)
    window.release() # Borrowed reference, release ownership!

cdef dict _charmodsfuns = {}
cdef void charmodsfun_cb(c_glfw3.GLFWwindow* a,unsigned int b,int c):
    cb = _charmodsfuns[<size_t>a]
    window = Window.fromthis(a)
    cb(window, b, c)
    window.release() # Borrowed reference, release ownership!

cdef dict _dropfuns = {}
cdef void dropfun_cb(c_glfw3.GLFWwindow* a,int b,const char** c):
    cb = _dropfuns[<size_t>a]
    d = [<bytes>c[i] for i in range(b)]
    window = Window.fromthis(a)
    cb(window, d)
    window.release() # Borrowed reference, release ownership!

#
# Functions
#

import contextlib as cl

@cl.contextmanager  
def chdir(dirname=None):
    import os
    curdir = os.getcwd()
    try:  
        if dirname is not None:  
            os.chdir(dirname)
        yield  
    finally:  
        os.chdir(curdir)

cpdef initialize():
    with chdir():
        return c_glfw3.glfwInit()

cpdef terminate():
    c_glfw3.glfwTerminate()

@cl.contextmanager
def initialized():
    initialize()
    try:
        yield
    finally:
        terminate()

cpdef get_version():
    cdef int major, minor, rev
    c_glfw3.glfwGetVersion(&major, &minor, &rev)
    return major, minor, rev

cpdef get_version_string():
    return c_glfw3.glfwGetVersionString()

cpdef double get_time():
    return c_glfw3.glfwGetTime()

cpdef set_time(double value):
    c_glfw3.glfwSetTime(value)
    
cpdef joystick_present(int joy):
    return c_glfw3.glfwJoystickPresent(joy)

cpdef get_joystick_axes(int joy):
    cdef int count
    cdef const float* axes = c_glfw3.glfwGetJoystickAxes(joy, &count)
    return [axes[i] for i in range(count)]

cpdef get_joystick_buttons(int joy):
    cdef int count
    cdef const unsigned char* buttons = c_glfw3.glfwGetJoystickButtons(joy, &count)
    return [buttons[i] for i in range(count)]

cpdef get_joystick_name(int joy):
    return c_glfw3.glfwGetJoystickName(joy)

cpdef poll_events():
    c_glfw3.glfwPollEvents()

cpdef wait_events():
    c_glfw3.glfwWaitEvents()

cpdef post_empty_event():
    c_glfw3.glfwPostEmptyEvent()

cpdef set_error_callback(cbfun):
    global _error_fun
    _error_fun = cbfun
    c_glfw3.glfwSetErrorCallback(errorfun_cb)

def set_monitor_callback(cbfun):
    global _monitorfun
    _monitorfun = cbfun
    c_glfw3.glfwSetMonitorCallback(monitorfun_cb)

cpdef swap_interval(int interval):
    c_glfw3.glfwSwapInterval(interval)

cpdef extension_supported(const char* extension):
    return c_glfw3.glfwExtensionSupported(extension)

cpdef get_proc_address(const char* procname):
    return <size_t>c_glfw3.glfwGetProcAddress(procname)

cdef class VideoMode:
    property width:
        def __get__(self):
            return self._this.width

    property height:
        def __get__(self):
            return self._this.height
    
    property size:
        def __get__(self):
            return (self.width, self.height)
    
    property red_bits:
        def __get__(self):
            return self._this.redBits

    property green_bits:
        def __get__(self):
            return self._this.greenBits

    property blue_bits:
        def __get__(self):
            return self._this.blueBits

    property refresh_rate:
        def __get__(self):
            return self._this.refreshRate
    
    property color_bits:
        def __get__(self):
            return (self.red_bits, self.green_bits, self.blue_bits)
    
    def __cinit__(self):
        self._this = NULL
    
    def __dealloc__(self):
        pass
        
    def __richcmp__(VideoMode self, VideoMode other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class Monitor:
    property position:
        def __get__(self):
            cdef int x, y
            c_glfw3.glfwGetMonitorPos(self._this, &x, &y)
            return (x, y)
    
    property size:
        def __get__(self):
            return self.video_mode.size
    
    property physical_size:
        def __get__(self):
            cdef int w, h
            c_glfw3.glfwGetMonitorPhysicalSize(self._this, &w, &h)
            return (w, h)
    
    property name:
        def __get__(self):
            return c_glfw3.glfwGetMonitorName(self._this)
    
    property gamma:
        def __set__(self, value):
            c_glfw3.glfwSetGamma(self._this, value)
    
    property gamma_ramp:
        def __get__(self):
            cdef c_glfw3.GLFWgammaramp * gamma_ramp = NULL
            gamma_ramp = c_glfw3.glfwGetGammaRamp(self._this)
            return GammaRamp.fromthis(gamma_ramp)
            
        def __set__(self, GammaRamp value):
            c_glfw3.glfwSetGammaRamp(self._this, value._this)
    
    property video_mode:
        def __get__(self):
            cdef c_glfw3.GLFWvidmode * video_mode = NULL
            video_mode = c_glfw3.glfwGetVideoMode(self._this)
            return VideoMode.fromthis(video_mode)
    
    property video_modes:
        def __get__(self):
            cdef int count
            cdef const c_glfw3.GLFWvidmode * video_modes = NULL
            video_modes = c_glfw3.glfwGetVideoModes(self._this, &count)
            return [VideoMode.fromthis(&video_modes[i]) for i in range(count)]
    
    @staticmethod
    def get_primary_monitor():
        cdef c_glfw3.GLFWmonitor * primary_monitor = NULL
        primary_monitor = c_glfw3.glfwGetPrimaryMonitor()
        return Monitor.fromthis(primary_monitor)
    
    @staticmethod
    def get_monitors():
        cdef int count
        cdef c_glfw3.GLFWmonitor ** monitors = NULL
        monitors = c_glfw3.glfwGetMonitors(&count)
        return [Monitor.fromthis(monitors[i]) for i in range(count)]
    
    def __cinit__(self):
        self._this = NULL
    
    def __dealloc__(self):
        pass
        
    def __richcmp__(Monitor self, Monitor other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class Cursor:
    def __cinit__(self):
        self._this = NULL
    
    #TODO: Ownership issues.
    """
    @staticmethod
    def fromshape(shape):
        cdef const c_glfw3.GLFWcursor * cursor = c_glfw3.glfwCreateStandardCursor(shape)
        return Cursor.fromthis(cursor)
    """
    
    def __init__(self, Image image, int xhot, int yhot):
        self._this = c_glfw3.glfwCreateCursor(image._this, xhot, yhot)
    
    def __dealloc__(self):
        c_glfw3.glfwDestroyCursor(self._this)
        self._this = NULL
        
    def __richcmp__(Cursor self, Cursor other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef getitem(obj, key, default=None):
    try:
        return obj[key]
    except (TypeError, KeyError, IndexError):
        return default

cdef getlen(obj, default=None):
    try:
        return len(obj)
    except TypeError:
        return default

cdef getshape(obj):
    lengths = []
    while True:
        length, obj = getlen(obj), getitem(obj, 0)
        if length is None: break
        lengths.append(length)
    return tuple(lengths)

cdef class Image:
    property width:
        def __get__(self):
            return self._this.width

    property height:
        def __get__(self):
            return self._this.height
    
    property size:
        def __get__(self):
            return (self.width, self.height)
    
    property pixels:
        def __get__(self):
            return self._data
            
        def __set__(self, value):
            cdef unsigned char[:,:,::1] data
            if isinstance(value, (tuple, list)):
                shape = getshape(value)
                data = view.array(shape=shape, itemsize=sizeof(unsigned char), format="c")
                for i in range(shape[0]):
                    for j in range(shape[1]):
                        for k in range(shape[2]):
                            data[i,j,k] = value[i][j][k]
            else:
                # must be a memory view or a buffer type
                data = value
            
            self._this.width = data.shape[0]
            self._this.height = data.shape[1]
            self._this.pixels = &data[0][0][0]
            
            self._data = data
    
    def __cinit__(self):
        self._this = NULL
        
    def __init__(self):
        self._this = <c_glfw3.GLFWimage *>malloc(sizeof(c_glfw3.GLFWimage))
    
    def __dealloc__(self):
        free(self._this)
        self._this = NULL
        
    def __richcmp__(Image self, Image other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class GammaRamp:
    property red:
        def __get__(self):
            return [self._this.red[i] for i in range(self._this.size)]

    property green:
        def __get__(self):
            return [self._this.green[i] for i in range(self._this.size)]
            
    property blue:
        def __get__(self):
            return [self._this.blue[i] for i in range(self._this.size)]
    
    def __cinit__(self):
        self._this = NULL
    
    def __dealloc__(self):
        pass
        
    def __richcmp__(GammaRamp self, GammaRamp other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this

cdef class Window:
    property context:
        def __get__(self):
            return Context(self)
    
    property position:
        def __get__(self):
            cdef int x, y
            c_glfw3.glfwGetWindowPos(self._this, &x, &y)
            return (x, y)
        
        def __set__(self, value):
            c_glfw3.glfwSetWindowPos(self._this, value[0], value[1])
        
    property size:
        def __get__(self):
            cdef int w, h
            c_glfw3.glfwGetWindowSize(self._this, &w, &h)
            return (w, h)
        
        def __set__(self, value):
            c_glfw3.glfwSetWindowSize(self._this, value[0], value[1])
    
    property frame_size:
        def __get__(self):
            cdef int l, t, r, b
            c_glfw3.glfwGetWindowFrameSize(self._this, &l, &t, &r, &b)
            return (l, t, r, b)
    
    property should_close:
        def __get__(self):
            return c_glfw3.glfwWindowShouldClose(self._this)
            
        def __set__(self, value):
            c_glfw3.glfwSetWindowShouldClose(self._this, value)
    
    property framebuffer_size:
        def __get__(self):
            cdef int w, h
            c_glfw3.glfwGetFramebufferSize(self._this, &w, &h)
            return (w, h)
    
    property clipboard_string:
        def __get__(self):
            return c_glfw3.glfwGetClipboardString(self._this)
        
        def __set__(self, const char * value):
            c_glfw3.glfwSetClipboardString(self._this, value)
    
    property title:
        def __set__(self, const char * value):
            c_glfw3.glfwSetWindowTitle(self._this, value)
    
    property cursor:
        def __set__(self, Cursor value):
            c_glfw3.glfwSetCursor(self._this, value._this)
    
    def __cinit__(self, *args, **kwargs):
        self._this = NULL
    
    def __init__(self, title, size=DEFAULT_WINDOW_SIZE, position=DEFAULT_WINDOW_POSITION, Monitor monitor=None, Context share=None, hints=None):
        cdef c_glfw3.GLFWmonitor * _monitor = NULL if monitor is None else monitor._this
        cdef c_glfw3.GLFWwindow * _share = NULL if share is None else share._this
        _hints = {}
        _hints.update(DEFAULT_WINDOW_HINTS)
        _hints.update(DEFAULT_CONTEXT_HINTS)
        _hints.update(hints or {})
        
        for key, value in _hints.items():
            Window.hint(key, value)
        
        self._this = c_glfw3.glfwCreateWindow(size[0], size[1], title, _monitor, _share)
        
        if not self:
            raise RuntimeError("Failed to create window.")
        
        if position is not None:
            self.position = position
    
    def __dealloc__(self):
        c_glfw3.glfwDestroyWindow(self._this)
        self._this = NULL
    
    def __richcmp__(Window self, Window other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
        
    def __hash__(self):
        return <size_t>self._this
    
    cpdef set_window_position_callback(self, cbfun):
        global _windowposfuns
        _windowposfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowPosCallback(self._this, windowposfun_cb)
    
    cpdef set_window_size_callback(self, cbfun):
        global _windowsizefuns
        _windowsizefuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowSizeCallback(self._this, windowsizefun_cb)
        
    cpdef set_window_close_callback(self, cbfun):
        global _windowclosefuns
        _windowclosefuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowCloseCallback(self._this, windowclosefun_cb)
    
    cpdef set_window_refresh_callback(self, cbfun):
        global _windowrefreshfuns
        _windowrefreshfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowRefreshCallback(self._this, windowrefreshfun_cb)
        
    cpdef set_window_focus_callback(self, cbfun):
        global _windowfocusfuns
        _windowfocusfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowFocusCallback(self._this, windowfocusfun_cb)
    
    cpdef set_window_iconify_callback(self, cbfun):
        global _windowiconifyfuns
        _windowiconifyfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetWindowIconifyCallback(self._this, windowiconifyfun_cb)
    
    cpdef set_framebuffer_size_callback(self, cbfun):
        global _framebuffersizefuns
        _framebuffersizefuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetFramebufferSizeCallback(self._this, framebuffersizefun_cb)
    
    cpdef set_key_callback(self, cbfun):
        global _keyfuns
        _keyfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetKeyCallback(self._this, keyfun_cb)

    cpdef set_char_callback(self, cbfun):
        global _charfuns
        _charfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCharCallback(self._this, charfun_cb)
    
    cpdef set_char_mods_callback(self, cbfun):
        global _charmodsfuns
        _charmodsfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCharModsCallback(self._this, charmodsfun_cb)
    
    cpdef set_mouse_button_callback(self, cbfun):
        global _mousebuttonfuns
        _mousebuttonfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetMouseButtonCallback(self._this, mousebuttonfun_cb)

    cpdef set_cursor_position_callback(self, cbfun):
        global _cursorposfuns
        _cursorposfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCursorPosCallback(self._this, cursorposfun_cb)

    cpdef set_cursor_enter_callback(self, cbfun):
        global _cursorenterfuns
        _cursorenterfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetCursorEnterCallback(self._this, cursorenterfun_cb)

    cpdef set_scroll_callback(self, cbfun):
        global _scrollfuns
        _scrollfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetScrollCallback(self._this, scrollfun_cb)
    
    cpdef set_drop_callback(self, cbfun):
        global _dropfuns
        _dropfuns[<size_t>self._this] = cbfun
        c_glfw3.glfwSetDropCallback(self._this, dropfun_cb)
    
    on_window_position = set_window_position_callback
    on_window_size = set_window_size_callback
    on_window_close = set_window_close_callback
    on_window_refresh = set_window_refresh_callback
    on_window_focus = set_window_focus_callback
    on_window_iconify = set_window_iconify_callback
    on_framebuffer_size = set_framebuffer_size_callback
    on_keyboard_key = set_key_callback
    on_keyboard_char = set_char_callback
    on_keyboard_char_mods = set_char_mods_callback
    on_mouse_button = set_mouse_button_callback
    on_mouse_position = set_cursor_position_callback
    on_mouse_enter = set_cursor_enter_callback
    on_mouse_wheel = set_scroll_callback
    on_window_drop = set_drop_callback
    
    cpdef get_attribute(self, int attrib):
        return c_glfw3.glfwGetWindowAttrib(self._this, attrib)
        
    cpdef get_input_mode(self, int mode):
        return c_glfw3.glfwGetInputMode(self._this, mode)
    
    cpdef set_input_mode(self, int mode, int value):
        c_glfw3.glfwSetInputMode(self._this, mode, value)
    
    cpdef iconify(self):
        c_glfw3.glfwIconifyWindow(self._this)
    
    cpdef restore(self):
        c_glfw3.glfwRestoreWindow(self._this)
    
    cpdef show(self):
        c_glfw3.glfwShowWindow(self._this)
    
    cpdef hide(self):
        c_glfw3.glfwHideWindow(self._this)
    
    cpdef swap_buffers(self):
        c_glfw3.glfwSwapBuffers(self._this)

cdef class Context:
    @staticmethod
    def get_current():
        cdef c_glfw3.GLFWwindow * window = NULL
        window = c_glfw3.glfwGetCurrentContext()
        return Context.fromthis(window)
        
    @staticmethod
    def set_current(Context context):
        cdef c_glfw3.GLFWwindow * window = NULL
        if context is not None: window = context._this
        c_glfw3.glfwMakeContextCurrent(window)
    
    def __cinit__(self):
        self._this = NULL

    def __init__(self, Window window):
        self._this = window._this

    def __dealloc__(self):
        pass

    def __richcmp__(Context self, Context other, int op):
        if op == 0:
            # <
            return self._this < other._this
        elif op == 1:
            # <=
            return self._this <= other._this
        elif op == 2:
            # ==
            return self._this == other._this
        elif op == 3:
            # !=
            return self._this != other._this
        elif op == 4:
            # >
            return self._this > other._this
        elif op == 5:
            # >=
            return self._this >= other._this
    
    def __nonzero__(self):
        return self._this != NULL
    
    def __hash__(self):
        return <size_t>self._this
